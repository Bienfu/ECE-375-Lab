gavrasm Gerd's AVR assembler version 3.6 (C)2017 by DG4FAC
----------------------------------------------------------
Source file: ece375-L8_TX.asm
Hex file:    ece375-L8_TX.hex
Eeprom file: ece375-L8_TX.eep
Compiled:    11.03.2017, 14:18:00
Pass:        2
     1: ;***********************************************************
     2: ;*
     3: ;*	Enter Name of file here
     4: ;*
     5: ;*	Enter the description of the program here
     6: ;*
     7: ;*	This is the TRANSMIT skeleton file for Lab 8 of ECE 375
     8: ;*
     9: ;***********************************************************
    10: ;*
    11: ;*	 Author: Danny Barnes
    12: ;*	   Date: 	
    13: ;*	address: b01110011
    14: ;***********************************************************
    15: 
    16: .include "m128def.inc"			; Include definition file
 -> Warning 009: Include defs not necessary, using internal values!
   File: ece375-L8_TX.asm, Line: 16
   Source line: .include "m128def.inc"			; Include definition file
    17: 
    18: ;***********************************************************
    19: ;*	Internal Register Definitions and Constants
    20: ;***********************************************************
    21: .def	mpr = r16				; Multi-Purpose Register
    22: .def	cmdr = r17				; Action code buffer register
    23: 
    24: .equ	EngEnR = 4				; Right Engine Enable Bit
    25: .equ	EngEnL = 7				; Left Engine Enable Bit
    26: .equ	EngDirR = 5				; Right Engine Direction Bit
    27: .equ	EngDirL = 6				; Left Engine Direction Bit
    28: ; Use these action codes between the remote and robot
    29: ; MSB = 1 thus:
    30: ; control signals are shifted right by one and ORed with 0b10000000 = $80
    31: .equ	MovFwd =  ($80|1<<(EngDirR-1)|1<<(EngDirL-1))	;0b10110000 Move Forward Action Code
    32: .equ	MovBck =  ($80|$00)								;0b10000000 Move Backward Action Code
    33: .equ	TurnR =   ($80|1<<(EngDirL-1))					;0b10100000 Turn Right Action Code
    34: .equ	TurnL =   ($80|1<<(EngDirR-1))					;0b10010000 Turn Left Action Code
    35: .equ	Halt =    ($80|1<<(EngEnR-1)|1<<(EngEnL-1))		;0b11001000 Halt Action Code
    36: .equ	Freeze =  0b11111000					; Freeze Action Code
    37: 
    38: .equ	BotAddy = 0b01110011	;Robot Addres Code
    39: 
    40: ;***********************************************************
    41: ;*	Start of Code Segment
    42: ;***********************************************************
    43: .cseg							; Beginning of code segment
    44: 
    45: ;***********************************************************
    46: ;*	Interrupt Vectors
    47: ;***********************************************************
    48: .org	$0000					; Beginning of IVs
    49: 000000   C045  rjmp 	INIT			; Reset interrupt
    50: 
    51: .org	$0046					; End of Interrupt Vectors
    52: 
    53: ;***********************************************************
    54: ;*	Program Initialization
    55: ;***********************************************************
    56: INIT:
    57: 	;Stack Pointer (VERY IMPORTANT!!!!)
    58: 000046   E100  ldi 	mpr, high(RAMEND) 
    59: 000047   BF0E  out 	SPH, mpr 
    60: 000048   EF0F  ldi 	mpr, low(RAMEND) 
    61: 000049   BF0D  out 	SPL, mpr 
    62: 	;I/O Ports
    63: 00004A   E000  ldi 	mpr, 0b00000000
    64: 00004B   BB01  out	DDRD, mpr
    65: 00004C   E10F  ldi 	mpr, 0b00011111
    66: 00004D   BB02  out	PORTD, mpr
    67: 	;USART1
    68: 		;Set baudrate at 2400bps
    69: 00004E   E001  ldi 	mpr, high($01A0)
    70: 00004F   9300  sts	UBRR0H, mpr
        000050   0090
    71: 000051   E001  ldi	mpr, high($01A0)
    72: 000052   B909  out	UBRR0L, mpr
    73: 		;Enable transmitter
    74: 000053   E008  ldi	mpr, (1<<TXEN0)
    75: 000054   B90A  out	UCSR0B, mpr
    76: 		;Set frame format: 8 data bits, 2 stop bits
    77: 000055   E00E  ldi	mpr, (0<<UMSEL0 | 1<<USBS0 | 1<<UCSZ01 | 1<<UCSZ00)
    78: 000056   9300  sts	UCSR0C, mpr
        000057   0095
    79: 	;Other
    80: 
    81: ;***********************************************************
    82: ;*	Main Program
    83: ;***********************************************************
    84: MAIN:
    85: 000058   B300  in	mpr, PIND
    86: 
    87: 000059   2711  clr	cmdr
    88: 	
    89: 	; Check for inputs and load respective commands
    90: 00005A   FF00  SBRS	mpr, 0
    91: 00005B   EA10  ldi	cmdr, TurnR
    92: 00005C   FF01  SBRS	mpr, 1
    93: 00005D   E810  ldi	cmdr, MovBck
    94: 00005E   FF02  SBRS	mpr, 2
    95: 00005F   EB10  ldi	cmdr, MovFwd
    96: 000060   FF03  SBRS	mpr, 3
    97: 000061   E910  ldi	cmdr, TurnL
    98: 000062   FF04  SBRS	mpr, 4
    99: 000063   EC18  ldi	cmdr, Halt
   100: 000064   FF05  SBRS	mpr, 5
   101: 000065   EF18  ldi	cmdr, Freeze
   102: 
   103: 	;If command to send, send it
   104: 000066   3010  cpi	cmdr, 0
   105: 000067   F381  breq	MAIN
   106: 000068   D001  rcall	USART_Transmit
   107: 
   108: 000069   CFEE  rjmp	MAIN
   109: 
   110: ;***********************************************************
   111: ;*	Functions and Subroutines
   112: ;***********************************************************
   113: 
   114: USART_Transmit:
   115: 00006A   9B5D  sbis	UCSR0A, UDRE0	; Loop until UDR0 is empty
   116: 00006B   CFFE  rjmp	USART_Transmit
   117: 00006C   E703  ldi	mpr, BotAddy
   118: 00006D   B90C  out	UDR0, mpr	; Move robot address to Transmit Data Buffer
   119: USART_Transmit_Stage2:
   120: 00006E   9B5D  sbis	UCSR0A, UDRE0	; Loop until UDR0 is empty
   121: 00006F   CFFE  rjmp	USART_Transmit_Stage2
   122: 000070   B91C  out	UDR0, cmdr	; Move action code to Transmit Data Buffer
   123: 000071   9508  ret
   124: 
   125: ;***********************************************************
   126: ;*	Stored Program Data
   127: ;***********************************************************
   128: 
   129: ;***********************************************************
   130: ;*	Additional Program Includes
   131: ;***********************************************************

Program             :       45 words.
Constants           :        0 words.
Total program memory:       45 words.
Eeprom space        :        0 bytes.
Data segment        :        0 bytes.
Compilation completed, no errors.
Compilation endet 11.03.2017, 14:18:00
