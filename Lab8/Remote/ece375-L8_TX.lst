gavrasm Gerd's AVR assembler version 3.6 (C)2017 by DG4FAC
----------------------------------------------------------
Source file: ece375-L8_TX.asm
Hex file:    ece375-L8_TX.hex
Eeprom file: ece375-L8_TX.eep
Compiled:    16.03.2017, 10:09:37
Pass:        2
     1: ;***********************************************************
     2: ;*
     3: ;*	Enter Name of file here
     4: ;*
     5: ;*	Enter the description of the program here
     6: ;*
     7: ;*	This is the TRANSMIT skeleton file for Lab 8 of ECE 375
     8: ;*
     9: ;***********************************************************
    10: ;*
    11: ;*	 Author: Danny Barnes
    12: ;*	   Date: 	
    13: ;*	address: b01110011
    14: ;***********************************************************
    15: 
    16: .include "m128def.inc"			; Include definition file
 -> Warning 009: Include defs not necessary, using internal values!
   File: ece375-L8_TX.asm, Line: 16
   Source line: .include "m128def.inc"			; Include definition file
    17: 
    18: ;***********************************************************
    19: ;*	Internal Register Definitions and Constants
    20: ;***********************************************************
    21: .def	mpr = r16				; Multi-Purpose Register
    22: .def	cmdr = r17				; Action code buffer register
    23: .def	lst = r20				; Button Press Memory
    24: 
    25: .equ	EngEnR = 4				; Right Engine Enable Bit
    26: .equ	EngEnL = 7				; Left Engine Enable Bit
    27: .equ	EngDirR = 5				; Right Engine Direction Bit
    28: .equ	EngDirL = 6				; Left Engine Direction Bit
    29: ; Use these action codes between the remote and robot
    30: ; MSB = 1 thus:
    31: ; control signals are shifted right by one and ORed with 0b10000000 = $80
    32: .equ	MovFwd =  ($80|1<<(EngDirR-1)|1<<(EngDirL-1))	;0b10110000 Move Forward Action Code
    33: .equ	MovBck =  ($80|$00)								;0b10000000 Move Backward Action Code
    34: .equ	TurnR =   ($80|1<<(EngDirL-1))					;0b10100000 Turn Right Action Code
    35: .equ	TurnL =   ($80|1<<(EngDirR-1))					;0b10010000 Turn Left Action Code
    36: .equ	Halt =    ($80|1<<(EngEnR-1)|1<<(EngEnL-1))		;0b11001000 Halt Action Code
    37: .equ	Freeze =  0b11111000					; Freeze Action Code
    38: 
    39: .equ	BotAddy = 0b01110011	;Robot Addres Code
    40: ;.equ	BotAddy = 0b00000000	;Robot Addres Code
    41: 
    42: ;***********************************************************
    43: ;*	Start of Code Segment
    44: ;***********************************************************
    45: .cseg							; Beginning of code segment
    46: 
    47: ;***********************************************************
    48: ;*	Interrupt Vectors
    49: ;***********************************************************
    50: .org	$0000					; Beginning of IVs
    51: 000000   C045  rjmp 	INIT			; Reset interrupt
    52: 
    53: .org	$0046					; End of Interrupt Vectors
    54: 
    55: ;***********************************************************
    56: ;*	Program Initialization
    57: ;***********************************************************
    58: INIT:
    59: 	;Stack Pointer (VERY IMPORTANT!!!!)
    60: 000046   E100  ldi 	mpr, high(RAMEND) 
    61: 000047   BF0E  out 	SPH, mpr 
    62: 000048   EF0F  ldi 	mpr, low(RAMEND) 
    63: 000049   BF0D  out 	SPL, mpr 
    64: 	;I/O Ports
    65: 00004A   E000  ldi 	mpr, 0b00000000
    66: 00004B   BB01  out	DDRD, mpr
    67: 00004C   EF03  ldi 	mpr, 0b11110011
    68: 00004D   BB02  out	PORTD, mpr
    69: 	;USART1
    70: 		;Set baudrate at 2400bps
    71: 00004E   E001  ldi 	mpr, high($01A0)
    72: 00004F   9300  sts	UBRR1H, mpr
        000050   0098
    73: 000051   EA00  ldi	mpr, low($01A0)
    74: 000052   9300  sts	UBRR1L, mpr
        000053   0099
    75: 		;Enable transmitter
    76: 000054   E008  ldi	mpr, (1<<TXEN1)
    77: 000055   9300  sts	UCSR1B, mpr
        000056   009A
    78: 		;Set frame format: 8 data bits, 2 stop bits
    79: 000057   E00E  ldi	mpr, (0<<UMSEL1 | 1<<USBS1 | 1<<UCSZ11 | 1<<UCSZ10)
    80: 000058   9300  sts	UCSR1C, mpr
        000059   009D
    81: 	;Other
    82: 00005A   EF4F  ldi	lst, $FF
    83: 
    84: ;***********************************************************
    85: ;*	Main Program
    86: ;***********************************************************
    87: MAIN:
    88: 00005B   B300  in	mpr, PIND
    89: 
    90: 00005C   1704  cp	mpr, lst		;Don't do anything if the buttons haven't changed
    91: 00005D   F3E9  breq	MAIN			
    92: 
    93: 00005E   2F40  mov	lst, mpr		;Store the new buttons into memory
    94: 	
    95: 00005F   2711  clr	cmdr
    96: 	
    97: 	; Check for inputs and load respective commands
    98: 000060   FF00  SBRS	mpr, 0
    99: 000061   EA10  ldi	cmdr, TurnR
   100: 000062   FF01  SBRS	mpr, 1
   101: 000063   E810  ldi	cmdr, MovBck
   102: 000064   FF04  SBRS	mpr, 4
   103: 000065   EB10  ldi	cmdr, MovFwd
   104: 000066   FF05  SBRS	mpr, 5
   105: 000067   E910  ldi	cmdr, TurnL
   106: 000068   FF06  SBRS	mpr, 6
   107: 000069   EC18  ldi	cmdr, Halt
   108: 00006A   FF07  SBRS	mpr, 7
   109: 00006B   EF18  ldi	cmdr, Freeze
   110: 
   111: 	;If command to send, send it
   112: 00006C   3010  cpi	cmdr, 0
   113: 00006D   F369  breq	MAIN
   114: 00006E   D001  rcall	USART_Transmit
   115: 
   116: 00006F   CFEB  rjmp	MAIN
   117: 
   118: ;***********************************************************
   119: ;*	Functions and Subroutines
   120: ;***********************************************************
   121: 
   122: USART_Transmit:
   123: 000070   9100  lds	mpr, UCSR1A
        000071   009B
   124: 000072   FF05  sbrs	mpr, UDRE1	; Loop until UDR0 is empty
   125: 000073   CFFC  rjmp	USART_Transmit
   126: 000074   E703  ldi	mpr, BotAddy
   127: 000075   9300  sts	UDR1, mpr	; Move robot address to Transmit Data Buffer
        000076   009C
   128: 
   129: USART_Transmit_Stage2:
   130: 000077   9100  lds	mpr, UCSR1A
        000078   009B
   131: 000079   FF05  sbrs	mpr, UDRE1	; Loop until UDR0 is empty
   132: 00007A   CFFC  rjmp	USART_Transmit_Stage2
   133: 00007B   9310  sts	UDR1, cmdr	; Move action code to Transmit Data Buffer
        00007C   009C
   134: 
   135: USART_Transmit_Wait_to_Finish:
   136: 00007D   9100  lds	mpr, UCSR1A
        00007E   009B
   137: 00007F   FF06  sbrs	mpr, TXC1
   138: 000080   CFFC  rjmp	USART_Transmit_Wait_to_Finish
   139: 
   140: 000081   9100  lds	mpr, UCSR1A
        000082   009B
   141: 000083   7F09  cbr	mpr, TXC1
   142: 000084   9300  sts	UCSR1A, mpr
        000085   009B
   143: 
   144: 000086   9508  ret
   145: 
   146: ;***********************************************************
   147: ;*	Stored Program Data
   148: ;***********************************************************
   149: 
   150: ;***********************************************************
   151: ;*	Additional Program Includes
   152: ;***********************************************************

Program             :       66 words.
Constants           :        0 words.
Total program memory:       66 words.
Eeprom space        :        0 bytes.
Data segment        :        0 bytes.
Compilation completed, no errors.
Compilation endet 16.03.2017, 10:09:37
